global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http


#---------------------------------------------------------------------
# Proxys to the openshift api backend port 6443
#---------------------------------------------------------------------
frontend api_ssl
        bind :6443
        mode tcp
        option tcplog

        # Wait for a client hello for at most 5 seconds
        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }

        use_backend prime_api_ssl if { req_ssl_sni -i api.prime.pitt.ca }
        use_backend dev_api_ssl if { req_ssl_sni -i api.dev.pitt.ca }
        use_backend prod_api_ssl if { req_ssl_sni -i api.prod.pitt.ca }

        #default_backend static

backend prime_api_ssl
        mode tcp
        balance roundrobin
        server prime_api_ssl_server 192.168.2.100:6443 check

backend dev_api_ssl
        mode tcp
        balance roundrobin
        server dev_api_ssl_server 192.168.2.125:6443 check

backend prod_api_ssl
        mode tcp
        balance roundrobin
        server prod_api_ssl_server 192.168.2.150:6443 check

#---------------------------------------------------------------------
# Proxys to the openshift wildcard backend port 80
#---------------------------------------------------------------------
#frontend wildcard_http
#        bind :80
#        mode http

#        use_backend prime_apps_http if { req.hdr(host) -m end .apps.prime.pitt.ca }
        #use_backend prod_http if { hdr(host) -m end .apps.prod.prime.pitt.ca }
#        default_backend static

#backend prime_apps_http
#        mode http
#        balance roundrobin
#        server prime_apps_http_server 192.168.2.100:80 check

#backend prod_http
#        mode http
#        balance roundrobin
#        server prod_http_server 192.168.2.150:80 check

#---------------------------------------------------------------------
# Handles port 443 for OpenShift wildcard, sso and terminating SSL for others
#---------------------------------------------------------------------
frontend wildcard_ssl
    bind :443
    mode tcp
    option tcplog

    # Wait for a client hello for at most 5 seconds
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    #acl internal_ip src 192.168.2.1/24

    use_backend prime_apps_ssl if { req_ssl_sni -m end .apps.prime.pitt.ca }
    use_backend dev_apps_ssl if { req_ssl_sni -m end .apps.dev.pitt.ca }
    use_backend prod_apps_ssl if { req_ssl_sni -m end .apps.prod.pitt.ca }

    # Route back to haproxy to handle SSL termination for non-passthrough sites
    #default_backend static

# Hub OpenShift cluster
backend prime_apps_ssl
    mode tcp
    balance roundrobin
    server prime_apps_ssl_server 192.168.2.100:443 check

# Dev OpenShift cluster
backend dev_apps_ssl
    mode tcp
    balance roundrobin
    server dev_apps_ssl_server 192.168.2.125:443 check

# Prod OpenShift cluster
backend prod_apps_ssl
    mode tcp
    balance roundrobin
    server prod_apps_ssl_server 192.168.2.150:443 check


frontend stats
    mode http
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

# Fallback to static site
#backend static
#    mode        http
#    balance     roundrobin
#    timeout     connect 5s
#    timeout     server  5s
#    server      static 127.0.0.1:4331 check
